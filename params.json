{"name":"Docnmock","tagline":"Document and mock your APIs","body":"[![Code\r\nClimate](https://codeclimate.com/github/antonio/docnmock.png)](https://codeclimate.com/github/antonio/docnmock)\r\n[![Build Status](https://travis-ci.org/antonio/docnmock.png?branch=master)](https://travis-ci.org/antonio/docnmock)\r\n\r\n# Docnmock\r\n\r\n## Disclaimer\r\n\r\nThis is a work in progress. I first wrote this document and then started\r\nimplementing the functionality, so don't expect things to work if you can still\r\nread this message :)\r\n\r\n## Rationale\r\n\r\nAPIs are cool.\r\n\r\nBut documenting them sucks. And mocking them sucks. I want to see if double suck\r\ncan be cool, or at the very least get all the boring parts in the same place.\r\n\r\nThis is an *experiment* and it will probably go nowhere. You have been warned.\r\n\r\n## The experiment\r\n\r\nI want to be able to automatically mock an API from its documentation. Using\r\n`docnmock` you will create the documentation for your API using `Ruby` and\r\ngenerate an HTML site from it.\r\n\r\nAlso, `docnmock` will let you mock your API using the examples included in your\r\ndocumentation. The idea is to have a small, self contained package that you can\r\nrequire from a client application that needs to integrate against your API.\r\n\r\nI am going to describe the possible operations using the [GitHub users\r\nAPI](http://developer.github.com/v3/users/)\r\n\r\n## Demo\r\n\r\nCheck out these other two projects\r\n\r\n* [docnmock_github](https://github.com/antonio/docnmock_github)\r\n* [github-user-info](https://github.com/antonio/github-user-info)\r\n\r\n## Why not reuse an existing solution? (aka why are you reinventing the wheel?)\r\n\r\nThere are excellent alternatives out there, like\r\n[apipie-rails](https://github.com/Pajk/apipie-rails://github.com/Pajk/apipie-rails)\r\nand [grape](https://github.com/intridea/grape). Oh, and also\r\n[swagger](https://developers.helloreverb.com/swagger), which is language\r\nagnostic and great.\r\n\r\nBut none of them was exactly what I was looking for.\r\n\r\nI don't want it to be coupled to a specific web framework.\r\n\r\nAdding a lot of documentation to the code using a DSL makes it more difficult to\r\nread both the documentation and the code to me.\r\n\r\nI want the documentation to be distributed as an independent project so that the\r\ngems can be required from the application that wants to use the mocks.\r\n\r\nSo in the end I preferred to roll my own implementation of the wheel :)\r\n\r\n## Documenting\r\n\r\n`Docnmock` allows you to document your API using a simple syntax. To define your\r\nAPI, all you need is its url. See example below\r\n\r\n```ruby\r\n\r\nDocnmock.api 'http://myawesomeservice.com/api' do\r\n\r\n  resource_group 'Users' do\r\n\r\n    description <<-EOD\r\n      Many of the resources on the users API provide a shortcut for\r\n      getting information about the currently authenticated user. If a request URL\r\n      does not include a :user parameter then the response will be for the logged in\r\n      user (and you must pass authentication information with your request).\r\n    EOD\r\n\r\n    resource :get, '/users/:user' do\r\n      description 'Get a single user'\r\n      parameter name: :user, description: 'The user', required: false\r\n      example path: '/users/octocat', response: response('get_users_octocat.json')\r\n    end\r\n\r\nend\r\n\r\n```\r\n\r\n`parameter` accepts a hash with the following attributes:\r\n\r\n* name\r\n\r\n  The name of the parameter. In the resource path, it is preceded by a colon.\r\n\r\n* description\r\n\r\n  Freestyle description of the parameter.\r\n\r\n* required\r\n\r\n  Either true or false, defaults to false.\r\n\r\n* type\r\n\r\n  Type of the parameter. There are no boundaries for this, but try to use well\r\n  known primitives as a guideline (string, int, boolean, etc)\r\n\r\n`example` accepts two arguments. The first one is the request path, including\r\nwhatever parameters are needed. The second one is the response that will be\r\nreturned (as a string). As you can see in the example above, you can (and\r\nshould!) use a helper to load the response from a file bundled with your gem.\r\n`docnmock` assumes your fixtures will be under a folder named `responses`. For\r\nmore information, please have a look at the\r\n[docnmock-github](https://github.com/antonio/docnmock-github) project.\r\n\r\nThe contents of `responses/get_users_octocat.json` would be something similar to\r\n\r\n```json\r\n{\r\n  \"login\": \"octocat\",\r\n  \"id\": 1,\r\n  \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n  \"gravatar_id\": \"somehexcode\",\r\n  \"url\": \"https://api.github.com/users/octocat\",\r\n  \"name\": \"monalisa octocat\",\r\n  \"company\": \"GitHub\",\r\n  \"blog\": \"https://github.com/blog\",\r\n  \"location\": \"San Francisco\",\r\n  \"email\": \"octocat@github.com\",\r\n  \"hireable\": false,\r\n  \"bio\": \"There once was...\",\r\n  \"public_repos\": 2,\r\n  \"public_gists\": 1,\r\n  \"followers\": 20,\r\n  \"following\": 0,\r\n  \"html_url\": \"https://github.com/octocat\",\r\n  \"created_at\": \"2008-01-14T04:33:35Z\",\r\n  \"type\": \"User\"\r\n}\r\n```\r\n\r\n## Generate documentation\r\n\r\n## Mocking\r\n\r\nEverything can be mocked\r\n\r\n```ruby\r\nDocnmock.api('http://api.github.com').mock\r\nDocnmock.api('http://api.github.com').resource_group('Users').mock\r\nDocnmock.api('http://api.github.com').resource_group('Users').resource(:get, '/users/:user').mock\r\n```\r\n\r\n## To-Do\r\n\r\nAs I said before, this is just an experiment. If I find it useful, here is\r\na list of improvements that can be done.\r\n\r\n* API versions\r\n* Description of resources written in markdown\r\n* Tomdoc\r\n* Rails integration?\r\n* Create Error classes instead of using the standard one\r\n* Pass headers to example\r\n* Resource validation and rake tasks to validate the API (say you are missing parameters in your\r\n  resources, for instance)\r\n* Refactor specs, I am pretty sure that there are some shared examples hidden\r\n  there.\r\n* Allow using a port other than 80\r\n\r\n\r\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/antonio/docnmock/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}